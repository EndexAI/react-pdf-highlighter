diff --git a/node_modules/pdfjs-dist/build/pdf.mjs b/node_modules/pdfjs-dist/build/pdf.mjs
index 7906d1a..4875738 100644
--- a/node_modules/pdfjs-dist/build/pdf.mjs
+++ b/node_modules/pdfjs-dist/build/pdf.mjs
@@ -11878,8 +11878,17 @@ class PDFWorker {
       if (this.#mainThreadWorkerMessageHandler) {
         return this.#mainThreadWorkerMessageHandler;
       }
-      const worker = await import( /*webpackIgnore: true*/this.workerSrc);
-      return worker.WorkerMessageHandler;
+      // Dynamically create a script element to load the worker script
+      return new Promise((resolve, reject) => {
+        const script = document.createElement('script');
+        script.src = this.workerSrc ?? "https://unpkg.com/pdfjs-dist@4.4.168/build/pdf.worker.min.mjs";
+        script.type = 'module';
+        script.onload = () => {
+          resolve(globalThis.pdfjsWorker.WorkerMessageHandler);
+        };
+        script.onerror = reject;
+        document.head.appendChild(script);
+      });
     };
     return shadow(this, "_setupFakeWorkerGlobal", loader());
   }
diff --git a/node_modules/pdfjs-dist/legacy/web/pdf_viewer.mjs b/node_modules/pdfjs-dist/legacy/web/pdf_viewer.mjs
index fad5698..ce02cd1 100644
--- a/node_modules/pdfjs-dist/legacy/web/pdf_viewer.mjs
+++ b/node_modules/pdfjs-dist/legacy/web/pdf_viewer.mjs
@@ -9749,10 +9749,16 @@ async function docProperties(pdfDocument) {
 class GenericScripting {
   constructor(sandboxBundleSrc) {
     this._ready = new Promise((resolve, reject) => {
-      const sandbox = import( /*webpackIgnore: true*/sandboxBundleSrc);
-      sandbox.then(pdfjsSandbox => {
-        resolve(pdfjsSandbox.QuickJSSandbox());
-      }).catch(reject);
+      const script = document.createElement('script');
+      script.src = sandboxBundleSrc ?? "https://unpkg.com/pdfjs-dist@4.4.168/build/pdf.sandbox.min.mjs";
+      script.type = 'module';
+      script.onload = () => {
+        import(sandboxBundleSrc).then(pdfjsSandbox => {
+          resolve(pdfjsSandbox.QuickJSSandbox());
+        }).catch(reject);
+      };
+      script.onerror = reject;
+      document.head.appendChild(script);
     });
   }
   async createSandbox(data) {
diff --git a/node_modules/pdfjs-dist/web/pdf_viewer.css b/node_modules/pdfjs-dist/web/pdf_viewer.css
index 94828c8..e4065fc 100644
--- a/node_modules/pdfjs-dist/web/pdf_viewer.css
+++ b/node_modules/pdfjs-dist/web/pdf_viewer.css
@@ -315,14 +315,14 @@
               backdrop-filter:var(--highlight-selected-backdrop-filter);
     }
 
-.textLayer ::-moz-selection{
-    background:rgba(0 0 255 / 0.25);
-    background:color-mix(in srgb, AccentColor, transparent 75%);
+.textLayer ::-moz-selection {
+    background: blue;
+    background: AccentColor;
   }
   
-.textLayer ::selection{
-    background:rgba(0 0 255 / 0.25);
-    background:color-mix(in srgb, AccentColor, transparent 75%);
+.textLayer ::selection {
+    background: blue;
+    background: AccentColor;
   }
 
 .textLayer br::-moz-selection{
diff --git a/node_modules/pdfjs-dist/web/pdf_viewer.mjs b/node_modules/pdfjs-dist/web/pdf_viewer.mjs
index 9c4f97d..35f1ce4 100644
--- a/node_modules/pdfjs-dist/web/pdf_viewer.mjs
+++ b/node_modules/pdfjs-dist/web/pdf_viewer.mjs
@@ -5994,10 +5994,16 @@ async function docProperties(pdfDocument) {
 class GenericScripting {
   constructor(sandboxBundleSrc) {
     this._ready = new Promise((resolve, reject) => {
-      const sandbox = import( /*webpackIgnore: true*/sandboxBundleSrc);
-      sandbox.then(pdfjsSandbox => {
-        resolve(pdfjsSandbox.QuickJSSandbox());
-      }).catch(reject);
+      const script = document.createElement('script');
+      script.src = sandboxBundleSrc ?? "https://unpkg.com/pdfjs-dist@4.4.168/build/pdf.sandbox.min.mjs";
+      script.type = 'module';
+      script.onload = () => {
+        import(sandboxBundleSrc).then(pdfjsSandbox => {
+          resolve(pdfjsSandbox.QuickJSSandbox());
+        }).catch(reject);
+      };
+      script.onerror = reject;
+      document.head.appendChild(script);
     });
   }
   async createSandbox(data) {
